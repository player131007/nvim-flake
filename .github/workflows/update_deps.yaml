name: update_deps

on:
  workflow_dispatch:
  schedule:
    - cron: "0 17 * * *"

permissions:
  contents: write
  pull-requests: write

jobs:
  update_deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.2
      - uses: DeterminateSystems/nix-installer-action@v10
      - name: setup git
        run: |
          git config user.email "tcm4095@gmail.com"
          git config user.name "GitHub Actions"
          git checkout -b updates-${{ github.run_id }}
      - name: update
        run: |
          getUpdates() {
            local getRevisions=$1
            local update=$2

            # i have no idea why this works
            local old=$(eval $getRevisions)
            $update >/dev/null 2>&1
            local new=$(eval $getRevisions)
            echo "[$old, $new]" | jq -r '. as [$old, $new] | $old | keys_unsorted | map(select($old[.]!=$new[.]) | "\(.): [\($old[.])..\($new[.])](https://github.com/\(.)/compare/\($old[.])...\($new[.]))")[]'
          }
          nix profile install nixpkgs#jq nixpkgs#niv

          flake_updates=$(getUpdates \
            "jq '.nodes | [.[.root.inputs[]].locked] | map({ \"\(.owner)/\(.repo)\": .rev[:7] }) | add' flake.lock" \
            "nix flake update")
          niv_updates=$(getUpdates \
            "jq 'map({\"\(.owner)/\(.repo)\": .rev[:7]}) | add' nix/sources.json" \
            "niv update")

          if [ -z "`git status --porcelain`" ]; then
            exit 0
          fi

          MSG=""
          if [ -n "$flake_updates" ]; then
            MSG="$MSG
          Flake updates:
          $flake_updates"
          fi
          if [ -n "$niv_updates" ]; then
            MSG="$MSG
          
          Niv updates:
          $niv_updates"
          fi

          git commit -am "update $(date -I)" -m "$MSG"
          git push -u origin updates-${{ github.run_id }}
          
          PR=$(gh pr create \
            --base master \
            --body "$MSG" \
            --fill \
            --title "Auto update $(date -I)")

          gh pr merge $PR --squash --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
